{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { Geometry, BufferGeometry } from 'three';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier';\nfunction useSubdivision(subdivisions) {\n  var ref = useRef();\n  var original = useRef();\n  var modifier = useRef();\n  useEffect(function () {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SubdivisionModifier(parseInt(subdivisions));\n    }\n  }, [subdivisions]);\n  useEffect(function () {\n    modifier.current.subdivisions = subdivisions;\n  }, [subdivisions]);\n  useEffect(function () {\n    if (original.current && ref.current) {\n      var geometry = new Geometry();\n      if (original.current instanceof BufferGeometry) {\n        geometry.fromBufferGeometry(original.current);\n      } else {\n        geometry = original.current.clone();\n      }\n      var bufferGeometry = new BufferGeometry();\n      var subdivided = bufferGeometry.fromGeometry(modifier.current.modify(geometry));\n      ref.current.geometry = subdivided;\n    }\n  }, [subdivisions]);\n  return ref;\n}\nexport { useSubdivision };","map":{"version":3,"names":["useRef","useEffect","Geometry","BufferGeometry","SubdivisionModifier","useSubdivision","subdivisions","ref","original","modifier","current","geometry","clone","parseInt","fromBufferGeometry","bufferGeometry","subdivided","fromGeometry","modify"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@react-three/drei/useSubdivision.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { Geometry, BufferGeometry } from 'three';\nimport { SubdivisionModifier } from 'three/examples/jsm/modifiers/SubdivisionModifier';\n\nfunction useSubdivision(subdivisions) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SubdivisionModifier(parseInt(subdivisions));\n    }\n  }, [subdivisions]);\n  useEffect(() => {\n    modifier.current.subdivisions = subdivisions;\n  }, [subdivisions]);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new Geometry();\n\n      if (original.current instanceof BufferGeometry) {\n        geometry.fromBufferGeometry(original.current);\n      } else {\n        geometry = original.current.clone();\n      }\n\n      const bufferGeometry = new BufferGeometry();\n      const subdivided = bufferGeometry.fromGeometry(modifier.current.modify(geometry));\n      ref.current.geometry = subdivided;\n    }\n  }, [subdivisions]);\n  return ref;\n}\n\nexport { useSubdivision };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,cAAc,QAAQ,OAAO;AAChD,SAASC,mBAAmB,QAAQ,kDAAkD;AAEtF,SAASC,cAAcA,CAACC,YAAY,EAAE;EACpC,IAAMC,GAAG,GAAGP,MAAM,CAAC,CAAC;EACpB,IAAMQ,QAAQ,GAAGR,MAAM,CAAC,CAAC;EACzB,IAAMS,QAAQ,GAAGT,MAAM,CAAC,CAAC;EACzBC,SAAS,CAAC,YAAM;IACd,IAAI,CAACO,QAAQ,CAACE,OAAO,EAAE;MACrBF,QAAQ,CAACE,OAAO,GAAGH,GAAG,CAACG,OAAO,CAACC,QAAQ,CAACC,KAAK,CAAC,CAAC;MAC/CH,QAAQ,CAACC,OAAO,GAAG,IAAIN,mBAAmB,CAACS,QAAQ,CAACP,YAAY,CAAC,CAAC;IACpE;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAClBL,SAAS,CAAC,YAAM;IACdQ,QAAQ,CAACC,OAAO,CAACJ,YAAY,GAAGA,YAAY;EAC9C,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAClBL,SAAS,CAAC,YAAM;IACd,IAAIO,QAAQ,CAACE,OAAO,IAAIH,GAAG,CAACG,OAAO,EAAE;MACnC,IAAIC,QAAQ,GAAG,IAAIT,QAAQ,CAAC,CAAC;MAE7B,IAAIM,QAAQ,CAACE,OAAO,YAAYP,cAAc,EAAE;QAC9CQ,QAAQ,CAACG,kBAAkB,CAACN,QAAQ,CAACE,OAAO,CAAC;MAC/C,CAAC,MAAM;QACLC,QAAQ,GAAGH,QAAQ,CAACE,OAAO,CAACE,KAAK,CAAC,CAAC;MACrC;MAEA,IAAMG,cAAc,GAAG,IAAIZ,cAAc,CAAC,CAAC;MAC3C,IAAMa,UAAU,GAAGD,cAAc,CAACE,YAAY,CAACR,QAAQ,CAACC,OAAO,CAACQ,MAAM,CAACP,QAAQ,CAAC,CAAC;MACjFJ,GAAG,CAACG,OAAO,CAACC,QAAQ,GAAGK,UAAU;IACnC;EACF,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;EAClB,OAAOC,GAAG;AACZ;AAEA,SAASF,cAAc"},"metadata":{},"sourceType":"module"}