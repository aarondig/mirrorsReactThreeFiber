{"ast":null,"code":"/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */import*as THREE from'three';export function ThinFilmFresnelMap(filmThickness,refractiveIndexFilm,refractiveIndexBase,size){this._filmThickness=filmThickness||100.0;this._refractiveIndexFilm=refractiveIndexFilm||2;this._refractiveIndexBase=refractiveIndexBase||3;this._size=size||128;this._data=new Uint8Array(this._size*4);this._updateData();THREE.DataTexture.call(this,this._data,this._size,1,THREE.RGBAFormat,THREE.UnsignedByteType,THREE.UVMapping,THREE.RepeatWrapping,THREE.RepeatWrapping,THREE.LinearFilter,THREE.LinearMipMapLinearFilter);this.generateMipmaps=true;this.needsUpdate=true;}ThinFilmFresnelMap.prototype=Object.create(THREE.DataTexture.prototype,{filmThickness:{get:function get(){return this._filmThickness;},set:function set(value){this._filmThickness=value;this.updateSettings(this._filmThickness,this._refractiveIndexFilm,this._refractiveIndexBase);}},refractiveIndexFilm:{get:function get(){return this._refractiveIndexFilm;},set:function set(value){this._refractiveIndexFilm=value;this.updateSettings(this._filmThickness,this._refractiveIndexFilm,this._refractiveIndexBase);}},refractiveIndexBase:{get:function get(){return this._refractiveIndexBase;},set:function set(value){this._refractiveIndexBase=value;this.updateSettings(this._filmThickness,this._refractiveIndexFilm,this._refractiveIndexBase);}}});/**\n * @private\n */ThinFilmFresnelMap.prototype._fresnelRefl=function(refractiveIndex1,refractiveIndex2,cos1,cos2,R,phi){// r is amplitudinal, R is power\nvar sin1Sqr=1.0-cos1*cos1;// = sin^2(incident)\nvar refrRatio=refractiveIndex1/refractiveIndex2;if(refrRatio*refrRatio*sin1Sqr>1.0){// total internal reflection\nR.x=1.0;R.y=1.0;var sqrRefrRatio=refrRatio*refrRatio;// it looks like glsl's atan ranges are different from those in JS?\nphi.x=2.0*Math.atan(-sqrRefrRatio*Math.sqrt(sin1Sqr-1.0/sqrRefrRatio)/cos1);phi.y=2.0*Math.atan(-Math.sqrt(sin1Sqr-1.0/sqrRefrRatio)/cos1);}else{var r_p=(refractiveIndex2*cos1-refractiveIndex1*cos2)/(refractiveIndex2*cos1+refractiveIndex1*cos2);var r_s=(refractiveIndex1*cos1-refractiveIndex2*cos2)/(refractiveIndex1*cos1+refractiveIndex2*cos2);phi.x=r_p<0.0?Math.PI:0.0;phi.y=r_s<0.0?Math.PI:0.0;R.x=r_p*r_p;R.y=r_s*r_s;}};/**\n * @private\n */ThinFilmFresnelMap.prototype._updateData=function(){var filmThickness=this._filmThickness;var refractiveIndexFilm=this._refractiveIndexFilm;var refractiveIndexBase=this._refractiveIndexBase;var size=this._size;// approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\nfunction xFit_1931(lambda){var t1=(lambda-442.0)*(lambda<442.0?0.0624:0.0374);var t2=(lambda-599.8)*(lambda<599.8?0.0264:0.0323);var t3=(lambda-501.1)*(lambda<501.1?0.049:0.0382);return 0.362*Math.exp(-0.5*t1*t1)+1.056*Math.exp(-0.5*t2*t2)-0.065*Math.exp(-0.5*t3*t3);}function yFit_1931(lambda){var t1=(lambda-568.8)*(lambda<568.8?0.0213:0.0247);var t2=(lambda-530.9)*(lambda<530.9?0.0613:0.0322);return 0.821*Math.exp(-0.5*t1*t1)+0.286*Math.exp(-0.5*t2*t2);}function zFit_1931(lambda){var t1=(lambda-437.0)*(lambda<437.0?0.0845:0.0278);var t2=(lambda-459.0)*(lambda<459.0?0.0385:0.0725);return 1.217*Math.exp(-0.5*t1*t1)+0.681*Math.exp(-0.5*t2*t2);}var data=this._data;var phi12=new THREE.Vector2();var phi21=new THREE.Vector2();var phi23=new THREE.Vector2();var R12=new THREE.Vector2();var T12=new THREE.Vector2();var R23=new THREE.Vector2();var R_bi=new THREE.Vector2();var T_tot=new THREE.Vector2();var R_star=new THREE.Vector2();var R_bi_sqr=new THREE.Vector2();var R_12_star=new THREE.Vector2();var R_star_t_tot=new THREE.Vector2();var refrRatioSqr=1.0/(refractiveIndexFilm*refractiveIndexFilm);var refrRatioSqrBase=refractiveIndexFilm*refractiveIndexFilm/(refractiveIndexBase*refractiveIndexBase);// RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n// create more pleasing bands\nvar numBands=64;var waveLenRange=780-380;// the entire visible range\nfor(var i=0;i<size;++i){var cosThetaI=i/size;var cosThetaT=Math.sqrt(1-refrRatioSqr*(1.0-cosThetaI*cosThetaI));var cosThetaT2=Math.sqrt(1-refrRatioSqrBase*(1.0-cosThetaT*cosThetaT));// this is essentially the extra distance traveled by a ray if it bounds through the film\nvar pathDiff=2.0*refractiveIndexFilm*filmThickness*cosThetaT;var pathDiff2PI=2.0*Math.PI*pathDiff;this._fresnelRefl(1.0,refractiveIndexFilm,cosThetaI,cosThetaT,R12,phi12);T12.x=1.0-R12.x;T12.y=1.0-R12.y;phi21.x=Math.PI-phi12.x;phi21.y=Math.PI-phi12.y;// this concerns the base layer\nthis._fresnelRefl(refractiveIndexFilm,refractiveIndexBase,cosThetaT,cosThetaT2,R23,phi23);R_bi.x=Math.sqrt(R23.x*R12.x);R_bi.y=Math.sqrt(R23.y*R12.y);T_tot.x=Math.sqrt(T12.x*T12.x);T_tot.y=Math.sqrt(T12.y*T12.y);R_star.x=T12.x*T12.x*R23.x/(1.0-R23.x*R12.x);R_star.y=T12.y*T12.y*R23.y/(1.0-R23.y*R12.y);R_bi_sqr.x=R_bi.x*R_bi.x;R_bi_sqr.y=R_bi.y*R_bi.y;R_12_star.x=R12.x+R_star.x;R_12_star.y=R12.y+R_star.y;R_star_t_tot.x=R_star.x-T_tot.x;R_star_t_tot.y=R_star.y-T_tot.y;var x=0,y=0,z=0;var totX=0,totY=0,totZ=0;// TODO: we could also put the thickness in the look-up table, make it a 2D table\nfor(var j=0;j<numBands;++j){var waveLen=380+j/(numBands-1)*waveLenRange;var deltaPhase=pathDiff2PI/waveLen;var cosPhiX=Math.cos(deltaPhase+phi23.x+phi21.x);var cosPhiY=Math.cos(deltaPhase+phi23.y+phi21.y);var valX=R_12_star.x+2.0*(R_bi.x*cosPhiX-R_bi_sqr.x)/(1.0-2*R_bi.x*cosPhiX+R_bi_sqr.x)*R_star_t_tot.x;var valY=R_12_star.y+2.0*(R_bi.y*cosPhiY-R_bi_sqr.y)/(1.0-2*R_bi.y*cosPhiY+R_bi_sqr.y)*R_star_t_tot.y;var v=0.5*(valX+valY);var wx=xFit_1931(waveLen);var wy=yFit_1931(waveLen);var wz=zFit_1931(waveLen);totX+=wx;totY+=wy;totZ+=wz;x+=wx*v;y+=wy*v;z+=wz*v;}x/=totX;y/=totY;z/=totZ;var r=3.2406*x-1.5372*y-0.4986*z;var g=-0.9689*x+1.8758*y+0.0415*z;var b=0.0557*x-0.204*y+1.057*z;r=THREE.Math.clamp(r,0.0,1.0);g=THREE.Math.clamp(g,0.0,1.0);b=THREE.Math.clamp(b,0.0,1.0);// linear to gamma\nr=Math.sqrt(r);g=Math.sqrt(g);b=Math.sqrt(b);// CIE XYZ to linear rgb conversion matrix:\n// 3.2406 -1.5372 -0.4986\n// -0.9689  1.8758  0.0415\n// 0.0557 -0.2040  1.0570\nvar k=i<<2;data[k]=Math.floor(r*0xff);data[k+1]=Math.floor(g*0xff);data[k+2]=Math.floor(b*0xff);data[k+3]=0xff;}this.needsUpdate=true;};","map":{"version":3,"names":["THREE","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","DataTexture","call","RGBAFormat","UnsignedByteType","UVMapping","RepeatWrapping","LinearFilter","LinearMipMapLinearFilter","generateMipmaps","needsUpdate","prototype","Object","create","get","set","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","x","y","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","Vector2","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","numBands","waveLenRange","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","valX","valY","v","wx","wy","wz","r","g","b","clamp","k","floor"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/src/components/Header/ThinFilmFresnelMap.js"],"sourcesContent":["/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three'\n\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 100.0\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._size = size || 128\n  this._data = new Uint8Array(this._size * 4)\n\n  this._updateData()\n\n  THREE.DataTexture.call(\n    this,\n    this._data,\n    this._size,\n    1,\n    THREE.RGBAFormat,\n    THREE.UnsignedByteType,\n    THREE.UVMapping,\n    THREE.RepeatWrapping,\n    THREE.RepeatWrapping,\n    THREE.LinearFilter,\n    THREE.LinearMipMapLinearFilter\n  )\n  this.generateMipmaps = true\n  this.needsUpdate = true\n}\n\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function () {\n      return this._filmThickness\n    },\n    set: function (value) {\n      this._filmThickness = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexFilm: {\n    get: function () {\n      return this._refractiveIndexFilm\n    },\n    set: function (value) {\n      this._refractiveIndexFilm = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexBase: {\n    get: function () {\n      return this._refractiveIndexBase\n    },\n    set: function (value) {\n      this._refractiveIndexBase = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  }\n})\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1 // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0\n    R.y = 1.0\n\n    var sqrRefrRatio = refrRatio * refrRatio\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan((-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio)) / cos1)\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1)\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2)\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2)\n\n    phi.x = r_p < 0.0 ? Math.PI : 0.0\n    phi.y = r_s < 0.0 ? Math.PI : 0.0\n\n    R.x = r_p * r_p\n    R.y = r_s * r_s\n  }\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness\n  var refractiveIndexFilm = this._refractiveIndexFilm\n  var refractiveIndexBase = this._refractiveIndexBase\n  var size = this._size\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374)\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323)\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382)\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3)\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247)\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322)\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278)\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725)\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  var data = this._data\n  var phi12 = new THREE.Vector2()\n  var phi21 = new THREE.Vector2()\n  var phi23 = new THREE.Vector2()\n  var R12 = new THREE.Vector2()\n  var T12 = new THREE.Vector2()\n  var R23 = new THREE.Vector2()\n  var R_bi = new THREE.Vector2()\n  var T_tot = new THREE.Vector2()\n  var R_star = new THREE.Vector2()\n  var R_bi_sqr = new THREE.Vector2()\n  var R_12_star = new THREE.Vector2()\n  var R_star_t_tot = new THREE.Vector2()\n\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm)\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase)\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64\n  var waveLenRange = 780 - 380 // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI))\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT))\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12)\n    T12.x = 1.0 - R12.x\n    T12.y = 1.0 - R12.y\n    phi21.x = Math.PI - phi12.x\n    phi21.y = Math.PI - phi12.y\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23)\n    R_bi.x = Math.sqrt(R23.x * R12.x)\n    R_bi.y = Math.sqrt(R23.y * R12.y)\n    T_tot.x = Math.sqrt(T12.x * T12.x)\n    T_tot.y = Math.sqrt(T12.y * T12.y)\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x)\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y)\n    R_bi_sqr.x = R_bi.x * R_bi.x\n    R_bi_sqr.y = R_bi.y * R_bi.y\n    R_12_star.x = R12.x + R_star.x\n    R_12_star.y = R12.y + R_star.y\n    R_star_t_tot.x = R_star.x - T_tot.x\n    R_star_t_tot.y = R_star.y - T_tot.y\n    var x = 0,\n      y = 0,\n      z = 0\n    var totX = 0,\n      totY = 0,\n      totZ = 0\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + (j / (numBands - 1)) * waveLenRange\n      var deltaPhase = pathDiff2PI / waveLen\n\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x)\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y)\n      var valX =\n        R_12_star.x +\n        ((2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x)) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x)) * R_star_t_tot.x\n      var valY =\n        R_12_star.y +\n        ((2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y)) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y)) * R_star_t_tot.y\n      var v = 0.5 * (valX + valY)\n\n      var wx = xFit_1931(waveLen)\n      var wy = yFit_1931(waveLen)\n      var wz = zFit_1931(waveLen)\n\n      totX += wx\n      totY += wy\n      totZ += wz\n\n      x += wx * v\n      y += wy * v\n      z += wz * v\n    }\n\n    x /= totX\n    y /= totY\n    z /= totZ\n\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z\n\n    r = THREE.Math.clamp(r, 0.0, 1.0)\n    g = THREE.Math.clamp(g, 0.0, 1.0)\n    b = THREE.Math.clamp(b, 0.0, 1.0)\n\n    // linear to gamma\n    r = Math.sqrt(r)\n    g = Math.sqrt(g)\n    b = Math.sqrt(b)\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2\n    data[k] = Math.floor(r * 0xff)\n    data[k + 1] = Math.floor(g * 0xff)\n    data[k + 2] = Math.floor(b * 0xff)\n    data[k + 3] = 0xff\n  }\n\n  this.needsUpdate = true\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}