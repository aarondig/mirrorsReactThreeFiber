{"ast":null,"code":"/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three';\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 100.0;\n  this._refractiveIndexFilm = refractiveIndexFilm || 2;\n  this._refractiveIndexBase = refractiveIndexBase || 3;\n  this._size = size || 128;\n  this._data = new Uint8Array(this._size * 4);\n  this._updateData();\n  THREE.DataTexture.call(this, this._data, this._size, 1, THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearMipMapLinearFilter);\n  this.generateMipmaps = true;\n  this.needsUpdate = true;\n}\n_c = ThinFilmFresnelMap;\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function get() {\n      return this._filmThickness;\n    },\n    set: function set(value) {\n      this._filmThickness = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  },\n  refractiveIndexFilm: {\n    get: function get() {\n      return this._refractiveIndexFilm;\n    },\n    set: function set(value) {\n      this._refractiveIndexFilm = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  },\n  refractiveIndexBase: {\n    get: function get() {\n      return this._refractiveIndexBase;\n    },\n    set: function set(value) {\n      this._refractiveIndexBase = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  }\n});\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1; // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2;\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0;\n    R.y = 1.0;\n    var sqrRefrRatio = refrRatio * refrRatio;\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan(-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2);\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2);\n    phi.x = r_p < 0.0 ? Math.PI : 0.0;\n    phi.y = r_s < 0.0 ? Math.PI : 0.0;\n    R.x = r_p * r_p;\n    R.y = r_s * r_s;\n  }\n};\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness;\n  var refractiveIndexFilm = this._refractiveIndexFilm;\n  var refractiveIndexBase = this._refractiveIndexBase;\n  var size = this._size;\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374);\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323);\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382);\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3);\n  }\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247);\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322);\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2);\n  }\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278);\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725);\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2);\n  }\n  var data = this._data;\n  var phi12 = new THREE.Vector2();\n  var phi21 = new THREE.Vector2();\n  var phi23 = new THREE.Vector2();\n  var R12 = new THREE.Vector2();\n  var T12 = new THREE.Vector2();\n  var R23 = new THREE.Vector2();\n  var R_bi = new THREE.Vector2();\n  var T_tot = new THREE.Vector2();\n  var R_star = new THREE.Vector2();\n  var R_bi_sqr = new THREE.Vector2();\n  var R_12_star = new THREE.Vector2();\n  var R_star_t_tot = new THREE.Vector2();\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm);\n  var refrRatioSqrBase = refractiveIndexFilm * refractiveIndexFilm / (refractiveIndexBase * refractiveIndexBase);\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64;\n  var waveLenRange = 780 - 380; // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size;\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI));\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT));\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT;\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff;\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12);\n    T12.x = 1.0 - R12.x;\n    T12.y = 1.0 - R12.y;\n    phi21.x = Math.PI - phi12.x;\n    phi21.y = Math.PI - phi12.y;\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23);\n    R_bi.x = Math.sqrt(R23.x * R12.x);\n    R_bi.y = Math.sqrt(R23.y * R12.y);\n    T_tot.x = Math.sqrt(T12.x * T12.x);\n    T_tot.y = Math.sqrt(T12.y * T12.y);\n    R_star.x = T12.x * T12.x * R23.x / (1.0 - R23.x * R12.x);\n    R_star.y = T12.y * T12.y * R23.y / (1.0 - R23.y * R12.y);\n    R_bi_sqr.x = R_bi.x * R_bi.x;\n    R_bi_sqr.y = R_bi.y * R_bi.y;\n    R_12_star.x = R12.x + R_star.x;\n    R_12_star.y = R12.y + R_star.y;\n    R_star_t_tot.x = R_star.x - T_tot.x;\n    R_star_t_tot.y = R_star.y - T_tot.y;\n    var x = 0,\n      y = 0,\n      z = 0;\n    var totX = 0,\n      totY = 0,\n      totZ = 0;\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + j / (numBands - 1) * waveLenRange;\n      var deltaPhase = pathDiff2PI / waveLen;\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x);\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y);\n      var valX = R_12_star.x + 2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x) * R_star_t_tot.x;\n      var valY = R_12_star.y + 2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y) * R_star_t_tot.y;\n      var v = 0.5 * (valX + valY);\n      var wx = xFit_1931(waveLen);\n      var wy = yFit_1931(waveLen);\n      var wz = zFit_1931(waveLen);\n      totX += wx;\n      totY += wy;\n      totZ += wz;\n      x += wx * v;\n      y += wy * v;\n      z += wz * v;\n    }\n    x /= totX;\n    y /= totY;\n    z /= totZ;\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z;\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z;\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z;\n    r = THREE.Math.clamp(r, 0.0, 1.0);\n    g = THREE.Math.clamp(g, 0.0, 1.0);\n    b = THREE.Math.clamp(b, 0.0, 1.0);\n\n    // linear to gamma\n    r = Math.sqrt(r);\n    g = Math.sqrt(g);\n    b = Math.sqrt(b);\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2;\n    data[k] = Math.floor(r * 0xff);\n    data[k + 1] = Math.floor(g * 0xff);\n    data[k + 2] = Math.floor(b * 0xff);\n    data[k + 3] = 0xff;\n  }\n  this.needsUpdate = true;\n};\nvar _c;\n$RefreshReg$(_c, \"ThinFilmFresnelMap\");","map":{"version":3,"names":["THREE","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","DataTexture","call","RGBAFormat","UnsignedByteType","UVMapping","RepeatWrapping","LinearFilter","LinearMipMapLinearFilter","generateMipmaps","needsUpdate","_c","prototype","Object","create","get","set","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","x","y","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","Vector2","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","numBands","waveLenRange","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","valX","valY","v","wx","wy","wz","r","g","b","clamp","k","floor","$RefreshReg$"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/src/components/Header/ThinFilmFresnelMap.js"],"sourcesContent":["/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three'\n\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 100.0\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._size = size || 128\n  this._data = new Uint8Array(this._size * 4)\n\n  this._updateData()\n\n  THREE.DataTexture.call(\n    this,\n    this._data,\n    this._size,\n    1,\n    THREE.RGBAFormat,\n    THREE.UnsignedByteType,\n    THREE.UVMapping,\n    THREE.RepeatWrapping,\n    THREE.RepeatWrapping,\n    THREE.LinearFilter,\n    THREE.LinearMipMapLinearFilter\n  )\n  this.generateMipmaps = true\n  this.needsUpdate = true\n}\n\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function () {\n      return this._filmThickness\n    },\n    set: function (value) {\n      this._filmThickness = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexFilm: {\n    get: function () {\n      return this._refractiveIndexFilm\n    },\n    set: function (value) {\n      this._refractiveIndexFilm = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexBase: {\n    get: function () {\n      return this._refractiveIndexBase\n    },\n    set: function (value) {\n      this._refractiveIndexBase = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  }\n})\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1 // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0\n    R.y = 1.0\n\n    var sqrRefrRatio = refrRatio * refrRatio\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan((-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio)) / cos1)\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1)\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2)\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2)\n\n    phi.x = r_p < 0.0 ? Math.PI : 0.0\n    phi.y = r_s < 0.0 ? Math.PI : 0.0\n\n    R.x = r_p * r_p\n    R.y = r_s * r_s\n  }\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness\n  var refractiveIndexFilm = this._refractiveIndexFilm\n  var refractiveIndexBase = this._refractiveIndexBase\n  var size = this._size\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374)\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323)\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382)\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3)\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247)\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322)\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278)\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725)\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  var data = this._data\n  var phi12 = new THREE.Vector2()\n  var phi21 = new THREE.Vector2()\n  var phi23 = new THREE.Vector2()\n  var R12 = new THREE.Vector2()\n  var T12 = new THREE.Vector2()\n  var R23 = new THREE.Vector2()\n  var R_bi = new THREE.Vector2()\n  var T_tot = new THREE.Vector2()\n  var R_star = new THREE.Vector2()\n  var R_bi_sqr = new THREE.Vector2()\n  var R_12_star = new THREE.Vector2()\n  var R_star_t_tot = new THREE.Vector2()\n\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm)\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase)\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64\n  var waveLenRange = 780 - 380 // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI))\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT))\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12)\n    T12.x = 1.0 - R12.x\n    T12.y = 1.0 - R12.y\n    phi21.x = Math.PI - phi12.x\n    phi21.y = Math.PI - phi12.y\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23)\n    R_bi.x = Math.sqrt(R23.x * R12.x)\n    R_bi.y = Math.sqrt(R23.y * R12.y)\n    T_tot.x = Math.sqrt(T12.x * T12.x)\n    T_tot.y = Math.sqrt(T12.y * T12.y)\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x)\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y)\n    R_bi_sqr.x = R_bi.x * R_bi.x\n    R_bi_sqr.y = R_bi.y * R_bi.y\n    R_12_star.x = R12.x + R_star.x\n    R_12_star.y = R12.y + R_star.y\n    R_star_t_tot.x = R_star.x - T_tot.x\n    R_star_t_tot.y = R_star.y - T_tot.y\n    var x = 0,\n      y = 0,\n      z = 0\n    var totX = 0,\n      totY = 0,\n      totZ = 0\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + (j / (numBands - 1)) * waveLenRange\n      var deltaPhase = pathDiff2PI / waveLen\n\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x)\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y)\n      var valX =\n        R_12_star.x +\n        ((2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x)) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x)) * R_star_t_tot.x\n      var valY =\n        R_12_star.y +\n        ((2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y)) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y)) * R_star_t_tot.y\n      var v = 0.5 * (valX + valY)\n\n      var wx = xFit_1931(waveLen)\n      var wy = yFit_1931(waveLen)\n      var wz = zFit_1931(waveLen)\n\n      totX += wx\n      totY += wy\n      totZ += wz\n\n      x += wx * v\n      y += wy * v\n      z += wz * v\n    }\n\n    x /= totX\n    y /= totY\n    z /= totZ\n\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z\n\n    r = THREE.Math.clamp(r, 0.0, 1.0)\n    g = THREE.Math.clamp(g, 0.0, 1.0)\n    b = THREE.Math.clamp(b, 0.0, 1.0)\n\n    // linear to gamma\n    r = Math.sqrt(r)\n    g = Math.sqrt(g)\n    b = Math.sqrt(b)\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2\n    data[k] = Math.floor(r * 0xff)\n    data[k + 1] = Math.floor(g * 0xff)\n    data[k + 2] = Math.floor(b * 0xff)\n    data[k + 3] = 0xff\n  }\n\n  this.needsUpdate = true\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}