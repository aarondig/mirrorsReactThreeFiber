{"ast":null,"code":"import { BufferAttribute, BufferGeometry, FileLoader, Loader } from \"../../../build/three.module.js\";\nvar DRACOLoader = function DRACOLoader(manager) {\n  Loader.call(this, manager);\n  this.decoderPath = '';\n  this.decoderConfig = {};\n  this.decoderBinary = null;\n  this.decoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.defaultAttributeIDs = {\n    position: 'POSITION',\n    normal: 'NORMAL',\n    color: 'COLOR',\n    uv: 'TEX_COORD'\n  };\n  this.defaultAttributeTypes = {\n    position: 'Float32Array',\n    normal: 'Float32Array',\n    color: 'Float32Array',\n    uv: 'Float32Array'\n  };\n};\nDRACOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: DRACOLoader,\n  setDecoderPath: function setDecoderPath(path) {\n    this.decoderPath = path;\n    return this;\n  },\n  setDecoderConfig: function setDecoderConfig(config) {\n    this.decoderConfig = config;\n    return this;\n  },\n  setWorkerLimit: function setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n  /** @deprecated */\n  setVerbosity: function setVerbosity() {\n    console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n  },\n  /** @deprecated */\n  setDrawMode: function setDrawMode() {\n    console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n  },\n  /** @deprecated */\n  setSkipDequantization: function setSkipDequantization() {\n    console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n  },\n  load: function load(url, onLoad, onProgress, onError) {\n    var _this = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      var taskConfig = {\n        attributeIDs: _this.defaultAttributeIDs,\n        attributeTypes: _this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n      _this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  },\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile: function decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n    var taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  },\n  decodeGeometry: function decodeGeometry(buffer, taskConfig) {\n    var _this2 = this;\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (var attribute in taskConfig.attributeTypes) {\n      var type = taskConfig.attributeTypes[attribute];\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    }\n\n    //\n\n    var taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n    if (DRACOLoader.taskCache.has(buffer)) {\n      var cachedTask = DRACOLoader.taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    }\n\n    //\n\n    var worker;\n    var taskID = this.workerNextTaskID++;\n    var taskCost = buffer.byteLength;\n\n    // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n    var geometryPending = this._getWorker(taskID, taskCost).then(function (_worker) {\n      worker = _worker;\n      return new Promise(function (resolve, reject) {\n        worker._callbacks[taskID] = {\n          resolve: resolve,\n          reject: reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig: taskConfig,\n          buffer: buffer\n        }, [buffer]);\n\n        // this.debug();\n      });\n    }).then(function (message) {\n      return _this2._createGeometry(message.geometry);\n    });\n\n    // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n    geometryPending.catch(function () {\n      return true;\n    }).then(function () {\n      if (worker && taskID) {\n        _this2._releaseTask(worker, taskID);\n\n        // this.debug();\n      }\n    });\n\n    // Cache the task result.\n    DRACOLoader.taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  },\n  _createGeometry: function _createGeometry(geometryData) {\n    var geometry = new BufferGeometry();\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n    for (var i = 0; i < geometryData.attributes.length; i++) {\n      var attribute = geometryData.attributes[i];\n      var name = attribute.name;\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n    return geometry;\n  },\n  _loadLibrary: function _loadLibrary(url, responseType) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise(function (resolve, reject) {\n      loader.load(url, resolve, undefined, reject);\n    });\n  },\n  preload: function preload() {\n    this._initDecoder();\n    return this;\n  },\n  _initDecoder: function _initDecoder() {\n    var _this3 = this;\n    if (this.decoderPending) return this.decoderPending;\n    var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    var librariesPending = [];\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n    this.decoderPending = Promise.all(librariesPending).then(function (libraries) {\n      var jsContent = libraries[0];\n      if (!useJS) {\n        _this3.decoderConfig.wasmBinary = libraries[1];\n      }\n      var fn = DRACOLoader.DRACOWorker.toString();\n      var body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      _this3.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  },\n  _getWorker: function _getWorker(taskID, taskCost) {\n    var _this4 = this;\n    return this._initDecoder().then(function () {\n      if (_this4.workerPool.length < _this4.workerLimit) {\n        var worker = new Worker(_this4.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: _this4.decoderConfig\n        });\n        worker.onmessage = function (e) {\n          var message = e.data;\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        _this4.workerPool.push(worker);\n      } else {\n        _this4.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      var worker = _this4.workerPool[_this4.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  _releaseTask: function _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  },\n  debug: function debug() {\n    console.log('Task load: ', this.workerPool.map(function (worker) {\n      return worker._taskLoad;\n    }));\n  },\n  dispose: function dispose() {\n    for (var i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n  var decoderConfig;\n  var decoderPending;\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve /*, reject*/) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n\n        break;\n      case 'decode':\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(function (module) {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(function (attr) {\n              return attr.array.buffer;\n            });\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry: geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n    var geometry = {\n      index: null,\n      attributes: []\n    };\n\n    // Gather all vertex attributes.\n    for (var attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute;\n      var attributeID;\n\n      // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    }\n\n    // Add index.\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    var numFaces = dracoGeometry.num_faces();\n    var numIndices = numFaces * 3;\n    var byteLength = numIndices * 4;\n    var ptr = draco._malloc(byteLength);\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n    draco._free(ptr);\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    var dataType = getDracoDataType(draco, attributeType);\n    var ptr = draco._malloc(byteLength);\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n    draco._free(ptr);\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n      case Int8Array:\n        return draco.DT_INT8;\n      case Int16Array:\n        return draco.DT_INT16;\n      case Int32Array:\n        return draco.DT_INT32;\n      case Uint8Array:\n        return draco.DT_UINT8;\n      case Uint16Array:\n        return draco.DT_UINT16;\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n};\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n};\nexport { DRACOLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","FileLoader","Loader","DRACOLoader","manager","call","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","_this","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","_this2","attribute","type","BYTES_PER_ELEMENT","undefined","name","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","_this3","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this4","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","decodeIndex","numFaces","num_faces","numIndices","_malloc","GetTrianglesUInt32Array","Uint32Array","HEAPF32","slice","_free","numComponents","num_components","numPoints","num_points","numValues","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","Float32Array","DT_FLOAT32","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","DT_UINT32","WeakMap","releaseDecoderModule","getDecoderModule"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from \"../../../build/three.module.js\";\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tvar numFaces = dracoGeometry.num_faces();\n\t\tvar numIndices = numFaces * 3;\n\t\tvar byteLength = numIndices * 4;\n\n\t\tvar ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tvar index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tvar dataType = getDracoDataType( draco, attributeType );\n\n\t\tvar ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tvar array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}