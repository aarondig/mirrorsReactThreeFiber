{"ast":null,"code":"import _toConsumableArray from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\nvar StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(StarfieldMaterial, _ShaderMaterial);\n  var _super = _createSuper(StarfieldMaterial);\n  function StarfieldMaterial() {\n    _classCallCheck(this, StarfieldMaterial);\n    return _super.call(this, {\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n  return _createClass(StarfieldMaterial);\n}(ShaderMaterial);\nvar genStar = function genStar(r) {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nvar Stars = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 100 : _ref$radius,\n    _ref$depth = _ref.depth,\n    depth = _ref$depth === void 0 ? 50 : _ref$depth,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 5000 : _ref$count,\n    _ref$saturation = _ref.saturation,\n    saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,\n    _ref$factor = _ref.factor,\n    factor = _ref$factor === void 0 ? 4 : _ref$factor,\n    _ref$fade = _ref.fade,\n    fade = _ref$fade === void 0 ? false : _ref$fade;\n  var material = useRef();\n  var _useMemo = useMemo(function () {\n      var positions = [];\n      var colors = [];\n      var sizes = Array.from({\n        length: count\n      }, function () {\n        return (0.5 + 0.5 * Math.random()) * factor;\n      });\n      var color = new Color();\n      var r = radius + depth;\n      var increment = depth / count;\n      for (var i = 0; i < count; i++) {\n        r -= increment * Math.random();\n        positions.push.apply(positions, _toConsumableArray(genStar(r).toArray()));\n        color.setHSL(i / count, saturation, 0.9);\n        colors.push(color.r, color.g, color.b);\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n    }, [count, depth, factor, radius, saturation]),\n    _useMemo2 = _slicedToArray(_useMemo, 3),\n    position = _useMemo2[0],\n    color = _useMemo2[1],\n    size = _useMemo2[2];\n  useFrame(function (state) {\n    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime());\n  });\n  var _useState = useState(function () {\n      return new StarfieldMaterial();\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    starfieldMaterial = _useState2[0];\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["forwardRef","useRef","useMemo","useState","createElement","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","_ShaderMaterial","_inherits","_super","_createSuper","_classCallCheck","call","uniforms","time","value","fade","vertexShader","fragmentShader","_createClass","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","_ref","ref","_ref$radius","radius","_ref$depth","depth","_ref$count","count","_ref$saturation","saturation","_ref$factor","factor","_ref$fade","material","_useMemo","positions","colors","sizes","Array","from","length","color","increment","i","push","apply","_toConsumableArray","toArray","setHSL","g","b","Float32Array","_useMemo2","_slicedToArray","position","size","state","current","clock","getElapsedTime","_useState","_useState2","starfieldMaterial","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/@react-three/drei/Stars.js"],"sourcesContent":["import { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = useRef();\n  const [position, color, size] = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}