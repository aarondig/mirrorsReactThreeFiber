{"ast":null,"code":"import { ShaderLib, ShaderMaterial, UniformsLib, UniformsUtils, Vector2 } from \"../../../build/three.module.js\";\n\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  dashOffset: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\n\nUniformsLib.line = {\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new Vector2(1, 1)\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  dashOffset: {\n    value: 0\n  },\n  gapSize: {\n    value: 1\n  },\n  // todo FIX - maybe change to totalSize\n  opacity: {\n    value: 1\n  }\n};\nShaderLib['line'] = {\n  uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.fog, UniformsLib.line]),\n  vertexShader: \"\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_vertex>\\n\\t\\t#include <fog_pars_vertex>\\n\\t\\t#include <logdepthbuf_pars_vertex>\\n\\t\\t#include <clipping_planes_pars_vertex>\\n\\n\\t\\tuniform float linewidth;\\n\\t\\tuniform vec2 resolution;\\n\\n\\t\\tattribute vec3 instanceStart;\\n\\t\\tattribute vec3 instanceEnd;\\n\\n\\t\\tattribute vec3 instanceColorStart;\\n\\t\\tattribute vec3 instanceColorEnd;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashScale;\\n\\t\\t\\tattribute float instanceDistanceStart;\\n\\t\\t\\tattribute float instanceDistanceEnd;\\n\\t\\t\\tvarying float vLineDistance;\\n\\n\\t\\t#endif\\n\\n\\t\\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\\n\\n\\t\\t\\t// trim end segment so it terminates between the camera plane and the near plane\\n\\n\\t\\t\\t// conservative estimate of the near plane\\n\\t\\t\\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\\n\\t\\t\\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\\n\\t\\t\\tfloat nearEstimate = - 0.5 * b / a;\\n\\n\\t\\t\\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\\n\\n\\t\\t\\tend.xyz = mix( start.xyz, end.xyz, alpha );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#ifdef USE_COLOR\\n\\n\\t\\t\\t\\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat aspect = resolution.x / resolution.y;\\n\\n\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t// camera space\\n\\t\\t\\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\\n\\t\\t\\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\\n\\n\\t\\t\\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\\n\\t\\t\\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\\n\\t\\t\\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\\n\\t\\t\\t// perhaps there is a more elegant solution -- WestLangley\\n\\n\\t\\t\\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\\n\\n\\t\\t\\tif ( perspective ) {\\n\\n\\t\\t\\t\\tif ( start.z < 0.0 && end.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( start, end );\\n\\n\\t\\t\\t\\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( end, start );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// clip space\\n\\t\\t\\tvec4 clipStart = projectionMatrix * start;\\n\\t\\t\\tvec4 clipEnd = projectionMatrix * end;\\n\\n\\t\\t\\t// ndc space\\n\\t\\t\\tvec2 ndcStart = clipStart.xy / clipStart.w;\\n\\t\\t\\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\\n\\n\\t\\t\\t// direction\\n\\t\\t\\tvec2 dir = ndcEnd - ndcStart;\\n\\n\\t\\t\\t// account for clip-space aspect ratio\\n\\t\\t\\tdir.x *= aspect;\\n\\t\\t\\tdir = normalize( dir );\\n\\n\\t\\t\\t// perpendicular to dir\\n\\t\\t\\tvec2 offset = vec2( dir.y, - dir.x );\\n\\n\\t\\t\\t// undo aspect ratio adjustment\\n\\t\\t\\tdir.x /= aspect;\\n\\t\\t\\toffset.x /= aspect;\\n\\n\\t\\t\\t// sign flip\\n\\t\\t\\tif ( position.x < 0.0 ) offset *= - 1.0;\\n\\n\\t\\t\\t// endcaps\\n\\t\\t\\tif ( position.y < 0.0 ) {\\n\\n\\t\\t\\t\\toffset += - dir;\\n\\n\\t\\t\\t} else if ( position.y > 1.0 ) {\\n\\n\\t\\t\\t\\toffset += dir;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// adjust for linewidth\\n\\t\\t\\toffset *= linewidth;\\n\\n\\t\\t\\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\\n\\t\\t\\toffset /= resolution.y;\\n\\n\\t\\t\\t// select end\\n\\t\\t\\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\\n\\n\\t\\t\\t// back to clip space\\n\\t\\t\\toffset *= clip.w;\\n\\n\\t\\t\\tclip.xy += offset;\\n\\n\\t\\t\\tgl_Position = clip;\\n\\n\\t\\t\\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\\n\\n\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t#include <clipping_planes_vertex>\\n\\t\\t\\t#include <fog_vertex>\\n\\n\\t\\t}\\n\\t\\t\",\n  fragmentShader: \"\\n\\t\\tuniform vec3 diffuse;\\n\\t\\tuniform float opacity;\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashSize;\\n\\t\\t\\tuniform float dashOffset;\\n\\t\\t\\tuniform float gapSize;\\n\\n\\t\\t#endif\\n\\n\\t\\tvarying float vLineDistance;\\n\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_fragment>\\n\\t\\t#include <fog_pars_fragment>\\n\\t\\t#include <logdepthbuf_pars_fragment>\\n\\t\\t#include <clipping_planes_pars_fragment>\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#include <clipping_planes_fragment>\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\\n\\n\\t\\t\\t\\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tif ( abs( vUv.y ) > 1.0 ) {\\n\\n\\t\\t\\t\\tfloat a = vUv.x;\\n\\t\\t\\t\\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\\n\\t\\t\\t\\tfloat len2 = a * a + b * b;\\n\\n\\t\\t\\t\\tif ( len2 > 1.0 ) discard;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t\\t#include <color_fragment>\\n\\n\\t\\t\\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\\n\\n\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t#include <encodings_fragment>\\n\\t\\t\\t#include <fog_fragment>\\n\\t\\t\\t#include <premultiplied_alpha_fragment>\\n\\n\\t\\t}\\n\\t\\t\"\n};\nvar LineMaterial = function LineMaterial(parameters) {\n  ShaderMaterial.call(this, {\n    type: 'LineMaterial',\n    uniforms: UniformsUtils.clone(ShaderLib['line'].uniforms),\n    vertexShader: ShaderLib['line'].vertexShader,\n    fragmentShader: ShaderLib['line'].fragmentShader,\n    clipping: true // required for clipping support\n  });\n\n  this.dashed = false;\n  Object.defineProperties(this, {\n    color: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.diffuse.value;\n      },\n      set: function set(value) {\n        this.uniforms.diffuse.value = value;\n      }\n    },\n    linewidth: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.linewidth.value;\n      },\n      set: function set(value) {\n        this.uniforms.linewidth.value = value;\n      }\n    },\n    dashScale: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.dashScale.value;\n      },\n      set: function set(value) {\n        this.uniforms.dashScale.value = value;\n      }\n    },\n    dashSize: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.dashSize.value;\n      },\n      set: function set(value) {\n        this.uniforms.dashSize.value = value;\n      }\n    },\n    dashOffset: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.dashOffset.value;\n      },\n      set: function set(value) {\n        this.uniforms.dashOffset.value = value;\n      }\n    },\n    gapSize: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.gapSize.value;\n      },\n      set: function set(value) {\n        this.uniforms.gapSize.value = value;\n      }\n    },\n    opacity: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.opacity.value;\n      },\n      set: function set(value) {\n        this.uniforms.opacity.value = value;\n      }\n    },\n    resolution: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.resolution.value;\n      },\n      set: function set(value) {\n        this.uniforms.resolution.value.copy(value);\n      }\n    }\n  });\n  this.setValues(parameters);\n};\nLineMaterial.prototype = Object.create(ShaderMaterial.prototype);\nLineMaterial.prototype.constructor = LineMaterial;\nLineMaterial.prototype.isLineMaterial = true;\nexport { LineMaterial };","map":{"version":3,"names":["ShaderLib","ShaderMaterial","UniformsLib","UniformsUtils","Vector2","line","linewidth","value","resolution","dashScale","dashSize","dashOffset","gapSize","opacity","uniforms","merge","common","fog","vertexShader","fragmentShader","LineMaterial","parameters","call","type","clone","clipping","dashed","Object","defineProperties","color","enumerable","get","diffuse","set","copy","setValues","prototype","create","constructor","isLineMaterial"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/lines/LineMaterial.js"],"sourcesContent":["import {\n\tShaderLib,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector2\n} from \"../../../build/three.module.js\";\n\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  dashOffset: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\n\nUniformsLib.line = {\n\n\tlinewidth: { value: 1 },\n\tresolution: { value: new Vector2( 1, 1 ) },\n\tdashScale: { value: 1 },\n\tdashSize: { value: 1 },\n\tdashOffset: { value: 0 },\n\tgapSize: { value: 1 }, // todo FIX - maybe change to totalSize\n\topacity: { value: 1 }\n\n};\n\nShaderLib[ 'line' ] = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tUniformsLib.common,\n\t\tUniformsLib.fog,\n\t\tUniformsLib.line\n\t] ),\n\n\tvertexShader:\n\t\t`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n\n\tfragmentShader:\n\t\t`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\nvar LineMaterial = function ( parameters ) {\n\n\tShaderMaterial.call( this, {\n\n\t\ttype: 'LineMaterial',\n\n\t\tuniforms: UniformsUtils.clone( ShaderLib[ 'line' ].uniforms ),\n\n\t\tvertexShader: ShaderLib[ 'line' ].vertexShader,\n\t\tfragmentShader: ShaderLib[ 'line' ].fragmentShader,\n\n\t\tclipping: true // required for clipping support\n\n\t} );\n\n\tthis.dashed = false;\n\n\tObject.defineProperties( this, {\n\n\t\tcolor: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.diffuse.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.diffuse.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tlinewidth: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.linewidth.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.linewidth.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdashScale: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.dashScale.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.dashScale.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdashSize: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.dashSize.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.dashSize.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdashOffset: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.dashOffset.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.dashOffset.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgapSize: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.gapSize.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.gapSize.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\topacity: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.opacity.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.opacity.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tresolution: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.resolution.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.resolution.value.copy( value );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tthis.setValues( parameters );\n\n};\n\nLineMaterial.prototype = Object.create( ShaderMaterial.prototype );\nLineMaterial.prototype.constructor = LineMaterial;\n\nLineMaterial.prototype.isLineMaterial = true;\n\nexport { LineMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}