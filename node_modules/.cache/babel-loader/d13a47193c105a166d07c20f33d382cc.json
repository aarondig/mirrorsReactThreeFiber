{"ast":null,"code":"import { DataTextureLoader, DataUtils, FloatType, HalfFloatType, LinearEncoding, LinearFilter, NearestFilter, RGBEEncoding, RGBEFormat, RGBFormat, UnsignedByteType } from \"../../../build/three.module.js\";\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function RGBELoader(manager) {\n  DataTextureLoader.call(this, manager);\n  this.type = UnsignedByteType;\n};\nRGBELoader.prototype = Object.assign(Object.create(DataTextureLoader.prototype), {\n  constructor: RGBELoader,\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n  parse: function parse(buffer) {\n    var /* return codes for rgbe routines */\n      //RGBE_RETURN_SUCCESS = 0,\n      RGBE_RETURN_FAILURE = -1,\n      /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error(\"RGBELoader Read Error: \" + (msg || ''));\n            break;\n          case rgbe_write_error:\n            console.error(\"RGBELoader Write Error: \" + (msg || ''));\n            break;\n          case rgbe_format_error:\n            console.error(\"RGBELoader Bad File Format: \" + (msg || ''));\n            break;\n          default:\n          case rgbe_memory_error:\n            console.error(\"RGBELoader: Error: \" + (msg || ''));\n        }\n        return RGBE_RETURN_FAILURE;\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = \"\\n\",\n      fgets = function fgets(buffer, lineLimit, consume) {\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        var p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunkSize = 128,\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          \tbyteCode = m.charCodeAt(i);\n          \tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          \telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          \tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function RGBE_ReadHeader(buffer) {\n        var line,\n          match,\n          // regexes to parse header info fields\n          magic_token_re = /^#\\?(\\S+)$/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0,\n            /* indicate which fields are valid */\n\n            string: '',\n            /* the actual header string */\n\n            comments: '',\n            /* comments found in header */\n\n            programtype: 'RGBE',\n            /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n            format: '',\n            /* RGBE format, default 32-bit_rle_rgbe */\n\n            gamma: 1.0,\n            /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n            exposure: 1.0,\n            /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n            width: 0,\n            height: 0 /* image dimensions, width/height */\n          };\n\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          return rgbe_error(rgbe_read_error, \"no header found\");\n        }\n\n        /* if you want to require the magic token then uncomment the next line */\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, \"bad initial token\");\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + \"\\n\";\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + \"\\n\";\n          if ('#' === line.charAt(0)) {\n            header.comments += line + \"\\n\";\n            continue; // comment line\n          }\n\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1], 10);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1], 10);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, \"missing format specifier\");\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer, w, h) {\n        var data_rgba,\n          offset,\n          pos,\n          count,\n          byteValue,\n          scanline_buffer,\n          ptr,\n          ptr_end,\n          i,\n          l,\n          off,\n          isEncodedRun,\n          scanline_width = w,\n          num_scanlines = h,\n          rgbeStart;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff ||\n        // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n        }\n        data_rgba = new Uint8Array(4 * w * h);\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n        }\n        offset = 0;\n        pos = 0;\n        ptr_end = 4 * scanline_width;\n        rgbeStart = new Uint8Array(4);\n        scanline_buffer = new Uint8Array(ptr_end);\n\n        // read in each successive scanline\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n          }\n\n          // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n          ptr = 0;\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, \"bad scanline data\");\n            }\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              byteValue = buffer[pos++];\n              for (i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n              //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n\n          // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n          l = scanline_width; //scanline_buffer.byteLength;\n          for (i = 0; i < l; i++) {\n            off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n    };\n    var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 0] * scale);\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 1] * scale);\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 2] * scale);\n    };\n    var byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    var rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      var w = rgbe_header_info.width,\n        h = rgbe_header_info.height,\n        image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        switch (this.type) {\n          case UnsignedByteType:\n            var data = image_rgba_data;\n            var format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n            var type = UnsignedByteType;\n            break;\n          case FloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var floatArray = new Float32Array(numElements);\n            for (var j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\n            }\n            var data = floatArray;\n            var format = RGBFormat;\n            var type = FloatType;\n            break;\n          case HalfFloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var halfArray = new Uint16Array(numElements);\n            for (var j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 3);\n            }\n            var data = halfArray;\n            var format = RGBFormat;\n            var type = HalfFloatType;\n            break;\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n    return null;\n  },\n  setDataType: function setDataType(value) {\n    this.type = value;\n    return this;\n  },\n  load: function load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case UnsignedByteType:\n          texture.encoding = RGBEEncoding;\n          texture.minFilter = NearestFilter;\n          texture.magFilter = NearestFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return DataTextureLoader.prototype.load.call(this, url, onLoadCallback, onProgress, onError);\n  }\n});\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","DataUtils","FloatType","HalfFloatType","LinearEncoding","LinearFilter","NearestFilter","RGBEEncoding","RGBEFormat","RGBFormat","UnsignedByteType","RGBELoader","manager","call","type","prototype","Object","assign","create","constructor","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","p","pos","i","len","s","chunkSize","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","line","match","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","scanline_width","num_scanlines","rgbeStart","Uint8Array","set","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/loaders/RGBELoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tNearestFilter,\n\tRGBEEncoding,\n\tRGBEFormat,\n\tRGBFormat,\n\tUnsignedByteType\n} from \"../../../build/three.module.js\";\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t};\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}