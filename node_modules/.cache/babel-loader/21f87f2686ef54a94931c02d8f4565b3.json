{"ast":null,"code":"import { BufferGeometry, Face3, Geometry } from \"../../../build/three.module.js\";\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nvar TessellateModifier = function TessellateModifier() {\n  var maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n  var maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var maxFaces = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  this.maxEdgeLength = maxEdgeLength;\n  this.maxIterations = maxIterations;\n  this.maxFaces = maxFaces;\n};\n\n// Applies the \"modify\" pattern\nTessellateModifier.prototype.modify = function (geometry) {\n  var isBufferGeometry = geometry.isBufferGeometry;\n  if (isBufferGeometry) {\n    geometry = new Geometry().fromBufferGeometry(geometry);\n  } else {\n    geometry = geometry.clone();\n  }\n  geometry.mergeVertices(6);\n  var finalized = false;\n  var iteration = 0;\n  var maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n  var edge;\n  while (!finalized && iteration < this.maxIterations && geometry.faces.length < this.maxFaces) {\n    var faces = [];\n    var faceVertexUvs = [];\n    finalized = true;\n    iteration++;\n    for (var i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n      faceVertexUvs[i] = [];\n    }\n    for (var i = 0, il = geometry.faces.length; i < il; i++) {\n      var face = geometry.faces[i];\n      if (face instanceof Face3) {\n        var a = face.a;\n        var b = face.b;\n        var c = face.c;\n        var va = geometry.vertices[a];\n        var vb = geometry.vertices[b];\n        var vc = geometry.vertices[c];\n        var dab = va.distanceToSquared(vb);\n        var dbc = vb.distanceToSquared(vc);\n        var dac = va.distanceToSquared(vc);\n        var limitReached = faces.length + il - i >= this.maxFaces;\n        if (!limitReached && (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared)) {\n          finalized = false;\n          var m = geometry.vertices.length;\n          var triA = face.clone();\n          var triB = face.clone();\n          if (dab >= dbc && dab >= dac) {\n            var vm = va.clone();\n            vm.lerp(vb, 0.5);\n            triA.a = a;\n            triA.b = m;\n            triA.c = c;\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[0].clone();\n              vnm.lerp(face.vertexNormals[1], 0.5);\n              triA.vertexNormals[1].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n            }\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[0].clone();\n              vcm.lerp(face.vertexColors[1], 0.5);\n              triA.vertexColors[1].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n            }\n            edge = 0;\n          } else if (dbc >= dab && dbc >= dac) {\n            var vm = vb.clone();\n            vm.lerp(vc, 0.5);\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n            triB.a = m;\n            triB.b = c;\n            triB.c = a;\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[1].clone();\n              vnm.lerp(face.vertexNormals[2], 0.5);\n              triA.vertexNormals[2].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n              triB.vertexNormals[1].copy(face.vertexNormals[2]);\n              triB.vertexNormals[2].copy(face.vertexNormals[0]);\n            }\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[1].clone();\n              vcm.lerp(face.vertexColors[2], 0.5);\n              triA.vertexColors[2].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n              triB.vertexColors[1].copy(face.vertexColors[2]);\n              triB.vertexColors[2].copy(face.vertexColors[0]);\n            }\n            edge = 1;\n          } else {\n            var vm = va.clone();\n            vm.lerp(vc, 0.5);\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n            if (face.vertexNormals.length === 3) {\n              var vnm = face.vertexNormals[0].clone();\n              vnm.lerp(face.vertexNormals[2], 0.5);\n              triA.vertexNormals[2].copy(vnm);\n              triB.vertexNormals[0].copy(vnm);\n            }\n            if (face.vertexColors.length === 3) {\n              var vcm = face.vertexColors[0].clone();\n              vcm.lerp(face.vertexColors[2], 0.5);\n              triA.vertexColors[2].copy(vcm);\n              triB.vertexColors[0].copy(vcm);\n            }\n            edge = 2;\n          }\n          faces.push(triA, triB);\n          geometry.vertices.push(vm);\n          for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n            if (geometry.faceVertexUvs[j].length) {\n              var uvs = geometry.faceVertexUvs[j][i];\n              var uvA = uvs[0];\n              var uvB = uvs[1];\n              var uvC = uvs[2];\n\n              // AB\n\n              if (edge === 0) {\n                var uvM = uvA.clone();\n                uvM.lerp(uvB, 0.5);\n                var uvsTriA = [uvA.clone(), uvM.clone(), uvC.clone()];\n                var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n\n                // BC\n              } else if (edge === 1) {\n                var uvM = uvB.clone();\n                uvM.lerp(uvC, 0.5);\n                var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n                var uvsTriB = [uvM.clone(), uvC.clone(), uvA.clone()];\n\n                // AC\n              } else {\n                var uvM = uvA.clone();\n                uvM.lerp(uvC, 0.5);\n                var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n                var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n              }\n              faceVertexUvs[j].push(uvsTriA, uvsTriB);\n            }\n          }\n        } else {\n          faces.push(face);\n          for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n            faceVertexUvs[j].push(geometry.faceVertexUvs[j][i]);\n          }\n        }\n      }\n    }\n    geometry.faces = faces;\n    geometry.faceVertexUvs = faceVertexUvs;\n  }\n  if (isBufferGeometry) {\n    return new BufferGeometry().fromGeometry(geometry);\n  } else {\n    return geometry;\n  }\n};\nexport { TessellateModifier };","map":{"version":3,"names":["BufferGeometry","Face3","Geometry","TessellateModifier","maxEdgeLength","arguments","length","undefined","maxIterations","maxFaces","Infinity","prototype","modify","geometry","isBufferGeometry","fromBufferGeometry","clone","mergeVertices","finalized","iteration","maxEdgeLengthSquared","edge","faces","faceVertexUvs","i","il","face","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","limitReached","m","triA","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","j","jl","uvs","uvA","uvB","uvC","uvM","uvsTriA","uvsTriB","fromGeometry"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/modifiers/TessellateModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFace3,\n\tGeometry\n} from \"../../../build/three.module.js\";\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nvar TessellateModifier = function ( maxEdgeLength = 0.1, maxIterations = 6, maxFaces = Infinity ) {\n\n\tthis.maxEdgeLength = maxEdgeLength;\n\tthis.maxIterations = maxIterations;\n\tthis.maxFaces = maxFaces;\n\n};\n\n// Applies the \"modify\" pattern\nTessellateModifier.prototype.modify = function ( geometry ) {\n\n\tconst isBufferGeometry = geometry.isBufferGeometry;\n\n\tif ( isBufferGeometry ) {\n\n\t\tgeometry = new Geometry().fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry = geometry.clone();\n\n\t}\n\n\tgeometry.mergeVertices( 6 );\n\n\tlet finalized = false;\n\tlet iteration = 0;\n\tconst maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\tlet edge;\n\n\twhile ( ! finalized && iteration < this.maxIterations && geometry.faces.length < this.maxFaces ) {\n\n\t\tconst faces = [];\n\t\tconst faceVertexUvs = [];\n\n\t\tfinalized = true;\n\t\titeration ++;\n\n\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tfaceVertexUvs[ i ] = [];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\n\n\t\t\tconst face = geometry.faces[ i ];\n\n\t\t\tif ( face instanceof Face3 ) {\n\n\t\t\t\tconst a = face.a;\n\t\t\t\tconst b = face.b;\n\t\t\t\tconst c = face.c;\n\n\t\t\t\tconst va = geometry.vertices[ a ];\n\t\t\t\tconst vb = geometry.vertices[ b ];\n\t\t\t\tconst vc = geometry.vertices[ c ];\n\n\t\t\t\tconst dab = va.distanceToSquared( vb );\n\t\t\t\tconst dbc = vb.distanceToSquared( vc );\n\t\t\t\tconst dac = va.distanceToSquared( vc );\n\n\t\t\t\tconst limitReached = ( faces.length + il - i ) >= this.maxFaces;\n\n\t\t\t\tif ( ! limitReached && ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) ) {\n\n\t\t\t\t\tfinalized = false;\n\n\t\t\t\t\tconst m = geometry.vertices.length;\n\n\t\t\t\t\tconst triA = face.clone();\n\t\t\t\t\tconst triB = face.clone();\n\n\t\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vb, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = m;\n\t\t\t\t\t\ttriA.c = c;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 1 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 1 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 0;\n\n\t\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\t\tvar vm = vb.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = c;\n\t\t\t\t\t\ttriB.c = a;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 1 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 1 ].copy( face.vertexNormals[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 2 ].copy( face.vertexNormals[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 1 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 1 ].copy( face.vertexColors[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexColors[ 2 ].copy( face.vertexColors[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 1;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaces.push( triA, triB );\n\t\t\t\t\tgeometry.vertices.push( vm );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\n\n\t\t\t\t\t\t\tconst uvs = geometry.faceVertexUvs[ j ][ i ];\n\n\t\t\t\t\t\t\tconst uvA = uvs[ 0 ];\n\t\t\t\t\t\t\tconst uvB = uvs[ 1 ];\n\t\t\t\t\t\t\tconst uvC = uvs[ 2 ];\n\n\t\t\t\t\t\t\t// AB\n\n\t\t\t\t\t\t\tif ( edge === 0 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvB, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t\t// BC\n\n\t\t\t\t\t\t\t} else if ( edge === 1 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvB.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];\n\n\t\t\t\t\t\t\t\t// AC\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaces.push( face );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.faces = faces;\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\n\n\t}\n\n\tif ( isBufferGeometry ) {\n\n\t\treturn new BufferGeometry().fromGeometry( geometry );\n\n\t} else {\n\n\t\treturn geometry;\n\n\t}\n\n};\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}