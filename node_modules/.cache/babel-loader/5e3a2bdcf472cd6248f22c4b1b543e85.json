{"ast":null,"code":"import { Vector3, Vector4 } from \"../../../build/three.module.js\";\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nvar NURBSUtils = {\n  /*\n  Finds knot vector span.\n  \tp : degree\n  u : parametric value\n  U : knot vector\n  \treturns the span\n  */\n  findSpan: function findSpan(p, u, U) {\n    var n = U.length - p - 1;\n    if (u >= U[n]) {\n      return n - 1;\n    }\n    if (u <= U[p]) {\n      return p;\n    }\n    var low = p;\n    var high = n;\n    var mid = Math.floor((low + high) / 2);\n    while (u < U[mid] || u >= U[mid + 1]) {\n      if (u < U[mid]) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n      mid = Math.floor((low + high) / 2);\n    }\n    return mid;\n  },\n  /*\n  Calculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n  \tspan : span in which u lies\n  u    : parametric point\n  p    : degree\n  U    : knot vector\n  \treturns array[p+1] with basis functions values.\n  */\n  calcBasisFunctions: function calcBasisFunctions(span, u, p, U) {\n    var N = [];\n    var left = [];\n    var right = [];\n    N[0] = 1.0;\n    for (var j = 1; j <= p; ++j) {\n      left[j] = u - U[span + 1 - j];\n      right[j] = U[span + j] - u;\n      var saved = 0.0;\n      for (var r = 0; r < j; ++r) {\n        var rv = right[r + 1];\n        var lv = left[j - r];\n        var temp = N[r] / (rv + lv);\n        N[r] = saved + rv * temp;\n        saved = lv * temp;\n      }\n      N[j] = saved;\n    }\n    return N;\n  },\n  /*\n  Calculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n  \tp : degree of B-Spline\n  U : knot vector\n  P : control points (x, y, z, w)\n  u : parametric point\n  \treturns point for given u\n  */\n  calcBSplinePoint: function calcBSplinePoint(p, U, P, u) {\n    var span = this.findSpan(p, u, U);\n    var N = this.calcBasisFunctions(span, u, p, U);\n    var C = new Vector4(0, 0, 0, 0);\n    for (var j = 0; j <= p; ++j) {\n      var point = P[span - p + j];\n      var Nj = N[j];\n      var wNj = point.w * Nj;\n      C.x += point.x * wNj;\n      C.y += point.y * wNj;\n      C.z += point.z * wNj;\n      C.w += point.w * Nj;\n    }\n    return C;\n  },\n  /*\n  Calculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n  \tspan : span in which u lies\n  u    : parametric point\n  p    : degree\n  n    : number of derivatives to calculate\n  U    : knot vector\n  \treturns array[n+1][p+1] with basis functions derivatives\n  */\n  calcBasisFunctionDerivatives: function calcBasisFunctionDerivatives(span, u, p, n, U) {\n    var zeroArr = [];\n    for (var i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n    var ders = [];\n    for (var i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n    var ndu = [];\n    for (var i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n    ndu[0][0] = 1.0;\n    var left = zeroArr.slice(0);\n    var right = zeroArr.slice(0);\n    for (var j = 1; j <= p; ++j) {\n      left[j] = u - U[span + 1 - j];\n      right[j] = U[span + j] - u;\n      var saved = 0.0;\n      for (var r = 0; r < j; ++r) {\n        var rv = right[r + 1];\n        var lv = left[j - r];\n        ndu[j][r] = rv + lv;\n        var temp = ndu[r][j - 1] / ndu[j][r];\n        ndu[r][j] = saved + rv * temp;\n        saved = lv * temp;\n      }\n      ndu[j][j] = saved;\n    }\n    for (var j = 0; j <= p; ++j) {\n      ders[0][j] = ndu[j][p];\n    }\n    for (var r = 0; r <= p; ++r) {\n      var s1 = 0;\n      var s2 = 1;\n      var a = [];\n      for (var i = 0; i <= p; ++i) {\n        a[i] = zeroArr.slice(0);\n      }\n      a[0][0] = 1.0;\n      for (var k = 1; k <= n; ++k) {\n        var d = 0.0;\n        var rk = r - k;\n        var pk = p - k;\n        if (r >= k) {\n          a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n          d = a[s2][0] * ndu[rk][pk];\n        }\n        var j1 = rk >= -1 ? 1 : -rk;\n        var j2 = r - 1 <= pk ? k - 1 : p - r;\n        for (var j = j1; j <= j2; ++j) {\n          a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n          d += a[s2][j] * ndu[rk + j][pk];\n        }\n        if (r <= pk) {\n          a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n          d += a[s2][k] * ndu[r][pk];\n        }\n        ders[k][r] = d;\n        var j = s1;\n        s1 = s2;\n        s2 = j;\n      }\n    }\n    var r = p;\n    for (var k = 1; k <= n; ++k) {\n      for (var j = 0; j <= p; ++j) {\n        ders[k][j] *= r;\n      }\n      r *= p - k;\n    }\n    return ders;\n  },\n  /*\n  \tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n  \t\tp  : degree\n  \tU  : knot vector\n  \tP  : control points\n  \tu  : Parametric points\n  \tnd : number of derivatives\n  \t\treturns array[d+1] with derivatives\n  \t*/\n  calcBSplineDerivatives: function calcBSplineDerivatives(p, U, P, u, nd) {\n    var du = nd < p ? nd : p;\n    var CK = [];\n    var span = this.findSpan(p, u, U);\n    var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n    var Pw = [];\n    for (var i = 0; i < P.length; ++i) {\n      var point = P[i].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      Pw[i] = point;\n    }\n    for (var k = 0; k <= du; ++k) {\n      var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n      for (var j = 1; j <= p; ++j) {\n        point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n      }\n      CK[k] = point;\n    }\n    for (var k = du + 1; k <= nd + 1; ++k) {\n      CK[k] = new Vector4(0, 0, 0);\n    }\n    return CK;\n  },\n  /*\n  Calculate \"K over I\"\n  \treturns k!/(i!(k-i)!)\n  */\n  calcKoverI: function calcKoverI(k, i) {\n    var nom = 1;\n    for (var j = 2; j <= k; ++j) {\n      nom *= j;\n    }\n    var denom = 1;\n    for (var j = 2; j <= i; ++j) {\n      denom *= j;\n    }\n    for (var j = 2; j <= k - i; ++j) {\n      denom *= j;\n    }\n    return nom / denom;\n  },\n  /*\n  Calculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n  \tPders : result of function calcBSplineDerivatives\n  \treturns array with derivatives for rational curve.\n  */\n  calcRationalCurveDerivatives: function calcRationalCurveDerivatives(Pders) {\n    var nd = Pders.length;\n    var Aders = [];\n    var wders = [];\n    for (var i = 0; i < nd; ++i) {\n      var point = Pders[i];\n      Aders[i] = new Vector3(point.x, point.y, point.z);\n      wders[i] = point.w;\n    }\n    var CK = [];\n    for (var k = 0; k < nd; ++k) {\n      var v = Aders[k].clone();\n      for (var i = 1; i <= k; ++i) {\n        v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n      }\n      CK[k] = v.divideScalar(wders[0]);\n    }\n    return CK;\n  },\n  /*\n  Calculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n  \tp  : degree\n  U  : knot vector\n  P  : control points in homogeneous space\n  u  : parametric points\n  nd : number of derivatives\n  \treturns array with derivatives.\n  */\n  calcNURBSDerivatives: function calcNURBSDerivatives(p, U, P, u, nd) {\n    var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n    return this.calcRationalCurveDerivatives(Pders);\n  },\n  /*\n  Calculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n  \tp1, p2 : degrees of B-Spline surface\n  U1, U2 : knot vectors\n  P      : control points (x, y, z, w)\n  u, v   : parametric values\n  \treturns point for given (u, v)\n  */\n  calcSurfacePoint: function calcSurfacePoint(p, q, U, V, P, u, v, target) {\n    var uspan = this.findSpan(p, u, U);\n    var vspan = this.findSpan(q, v, V);\n    var Nu = this.calcBasisFunctions(uspan, u, p, U);\n    var Nv = this.calcBasisFunctions(vspan, v, q, V);\n    var temp = [];\n    for (var l = 0; l <= q; ++l) {\n      temp[l] = new Vector4(0, 0, 0, 0);\n      for (var k = 0; k <= p; ++k) {\n        var point = P[uspan - p + k][vspan - q + l].clone();\n        var w = point.w;\n        point.x *= w;\n        point.y *= w;\n        point.z *= w;\n        temp[l].add(point.multiplyScalar(Nu[k]));\n      }\n    }\n    var Sw = new Vector4(0, 0, 0, 0);\n    for (var l = 0; l <= q; ++l) {\n      Sw.add(temp[l].multiplyScalar(Nv[l]));\n    }\n    Sw.divideScalar(Sw.w);\n    target.set(Sw.x, Sw.y, Sw.z);\n  }\n};\nexport { NURBSUtils };","map":{"version":3,"names":["Vector3","Vector4","NURBSUtils","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/curves/NURBSUtils.js"],"sourcesContent":["import {\n\tVector3,\n\tVector4\n} from \"../../../build/three.module.js\";\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nvar NURBSUtils = {\n\n\t/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\tfindSpan: function ( p, u, U ) {\n\n\t\tvar n = U.length - p - 1;\n\n\t\tif ( u >= U[ n ] ) {\n\n\t\t\treturn n - 1;\n\n\t\t}\n\n\t\tif ( u <= U[ p ] ) {\n\n\t\t\treturn p;\n\n\t\t}\n\n\t\tvar low = p;\n\t\tvar high = n;\n\t\tvar mid = Math.floor( ( low + high ) / 2 );\n\n\t\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\t\tif ( u < U[ mid ] ) {\n\n\t\t\t\thigh = mid;\n\n\t\t\t} else {\n\n\t\t\t\tlow = mid;\n\n\t\t\t}\n\n\t\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t\t}\n\n\t\treturn mid;\n\n\t},\n\n\n\t/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\tcalcBasisFunctions: function ( span, u, p, U ) {\n\n\t\tvar N = [];\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tN[ 0 ] = 1.0;\n\n\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tvar saved = 0.0;\n\n\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\tvar temp = N[ r ] / ( rv + lv );\n\t\t\t\tN[ r ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t }\n\n\t\t\t N[ j ] = saved;\n\n\t\t }\n\n\t\t return N;\n\n\t},\n\n\n\t/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\tcalcBSplinePoint: function ( p, U, P, u ) {\n\n\t\tvar span = this.findSpan( p, u, U );\n\t\tvar N = this.calcBasisFunctions( span, u, p, U );\n\t\tvar C = new Vector4( 0, 0, 0, 0 );\n\n\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\tvar point = P[ span - p + j ];\n\t\t\tvar Nj = N[ j ];\n\t\t\tvar wNj = point.w * Nj;\n\t\t\tC.x += point.x * wNj;\n\t\t\tC.y += point.y * wNj;\n\t\t\tC.z += point.z * wNj;\n\t\t\tC.w += point.w * Nj;\n\n\t\t}\n\n\t\treturn C;\n\n\t},\n\n\n\t/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\tcalcBasisFunctionDerivatives: function ( span, u, p, n, U ) {\n\n\t\tvar zeroArr = [];\n\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\tzeroArr[ i ] = 0.0;\n\n\t\tvar ders = [];\n\t\tfor ( var i = 0; i <= n; ++ i )\n\t\t\tders[ i ] = zeroArr.slice( 0 );\n\n\t\tvar ndu = [];\n\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\t\tndu[ 0 ][ 0 ] = 1.0;\n\n\t\tvar left = zeroArr.slice( 0 );\n\t\tvar right = zeroArr.slice( 0 );\n\n\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tvar saved = 0.0;\n\n\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\t\tvar temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t}\n\n\t\t\tndu[ j ][ j ] = saved;\n\n\t\t}\n\n\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t\t}\n\n\t\tfor ( var r = 0; r <= p; ++ r ) {\n\n\t\t\tvar s1 = 0;\n\t\t\tvar s2 = 1;\n\n\t\t\tvar a = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i ) {\n\n\t\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t\t}\n\n\t\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\tvar d = 0.0;\n\t\t\t\tvar rk = r - k;\n\t\t\t\tvar pk = p - k;\n\n\t\t\t\tif ( r >= k ) {\n\n\t\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tvar j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\t\tvar j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\t\tfor ( var j = j1; j <= j2; ++ j ) {\n\n\t\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( r <= pk ) {\n\n\t\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tders[ k ][ r ] = d;\n\n\t\t\t\tvar j = s1;\n\t\t\t\ts1 = s2;\n\t\t\t\ts2 = j;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar r = p;\n\n\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tders[ k ][ j ] *= r;\n\n\t\t\t}\n\n\t\t\tr *= p - k;\n\n\t\t}\n\n\t\treturn ders;\n\n\t},\n\n\n\t/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\tcalcBSplineDerivatives: function ( p, U, P, u, nd ) {\n\n\t\tvar du = nd < p ? nd : p;\n\t\tvar CK = [];\n\t\tvar span = this.findSpan( p, u, U );\n\t\tvar nders = this.calcBasisFunctionDerivatives( span, u, p, du, U );\n\t\tvar Pw = [];\n\n\t\tfor ( var i = 0; i < P.length; ++ i ) {\n\n\t\t\tvar point = P[ i ].clone();\n\t\t\tvar w = point.w;\n\n\t\t\tpoint.x *= w;\n\t\t\tpoint.y *= w;\n\t\t\tpoint.z *= w;\n\n\t\t\tPw[ i ] = point;\n\n\t\t}\n\n\t\tfor ( var k = 0; k <= du; ++ k ) {\n\n\t\t\tvar point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = point;\n\n\t\t}\n\n\t\tfor ( var k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\t\tCK[ k ] = new Vector4( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn CK;\n\n\t},\n\n\n\t/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\tcalcKoverI: function ( k, i ) {\n\n\t\tvar nom = 1;\n\n\t\tfor ( var j = 2; j <= k; ++ j ) {\n\n\t\t\tnom *= j;\n\n\t\t}\n\n\t\tvar denom = 1;\n\n\t\tfor ( var j = 2; j <= i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\tfor ( var j = 2; j <= k - i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\treturn nom / denom;\n\n\t},\n\n\n\t/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\tcalcRationalCurveDerivatives: function ( Pders ) {\n\n\t\tvar nd = Pders.length;\n\t\tvar Aders = [];\n\t\tvar wders = [];\n\n\t\tfor ( var i = 0; i < nd; ++ i ) {\n\n\t\t\tvar point = Pders[ i ];\n\t\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\n\t\t\twders[ i ] = point.w;\n\n\t\t}\n\n\t\tvar CK = [];\n\n\t\tfor ( var k = 0; k < nd; ++ k ) {\n\n\t\t\tvar v = Aders[ k ].clone();\n\n\t\t\tfor ( var i = 1; i <= k; ++ i ) {\n\n\t\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( this.calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t\t}\n\n\t\treturn CK;\n\n\t},\n\n\n\t/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\tcalcNURBSDerivatives: function ( p, U, P, u, nd ) {\n\n\t\tvar Pders = this.calcBSplineDerivatives( p, U, P, u, nd );\n\t\treturn this.calcRationalCurveDerivatives( Pders );\n\n\t},\n\n\n\t/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\tcalcSurfacePoint: function ( p, q, U, V, P, u, v, target ) {\n\n\t\tvar uspan = this.findSpan( p, u, U );\n\t\tvar vspan = this.findSpan( q, v, V );\n\t\tvar Nu = this.calcBasisFunctions( uspan, u, p, U );\n\t\tvar Nv = this.calcBasisFunctions( vspan, v, q, V );\n\t\tvar temp = [];\n\n\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( var k = 0; k <= p; ++ k ) {\n\n\t\t\t\tvar point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\t\tvar w = point.w;\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\t\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar Sw = new Vector4( 0, 0, 0, 0 );\n\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t\t}\n\n\t\tSw.divideScalar( Sw.w );\n\t\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n\t}\n\n};\n\nexport { NURBSUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}