{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, Geometry, Vector3 } from \"../../../build/three.module.js\";\n\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nvar SimplifyModifier = function SimplifyModifier() {};\n(function () {\n  var cb = new Vector3(),\n    ab = new Vector3();\n  function pushIfUnique(array, object) {\n    if (array.indexOf(object) === -1) array.push(object);\n  }\n  function removeFromArray(array, object) {\n    var k = array.indexOf(object);\n    if (k > -1) array.splice(k, 1);\n  }\n  function computeEdgeCollapseCost(u, v) {\n    // if we collapse edge uv by moving u to v then how\n    // much different will the model change, i.e. the \"error\".\n\n    var edgelength = v.position.distanceTo(u.position);\n    var curvature = 0;\n    var sideFaces = [];\n    var i,\n      il = u.faces.length,\n      face,\n      sideFace;\n\n    // find the \"sides\" triangles that are on the edge uv\n    for (i = 0; i < il; i++) {\n      face = u.faces[i];\n      if (face.hasVertex(v)) {\n        sideFaces.push(face);\n      }\n    }\n\n    // use the triangle facing most away from the sides\n    // to determine our curvature term\n    for (i = 0; i < il; i++) {\n      var minCurvature = 1;\n      face = u.faces[i];\n      for (var j = 0; j < sideFaces.length; j++) {\n        sideFace = sideFaces[j];\n        // use dot product of face normals.\n        var dotProd = face.normal.dot(sideFace.normal);\n        minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n      }\n      curvature = Math.max(curvature, minCurvature);\n    }\n\n    // crude approach in attempt to preserve borders\n    // though it seems not to be totally correct\n    var borders = 0;\n    if (sideFaces.length < 2) {\n      // we add some arbitrary cost for borders,\n      // borders += 10;\n      curvature = 1;\n    }\n    var amt = edgelength * curvature + borders;\n    return amt;\n  }\n  function computeEdgeCostAtVertex(v) {\n    // compute the edge collapse cost for all edges that start\n    // from vertex v.  Since we are only interested in reducing\n    // the object by selecting the min cost edge at each step, we\n    // only cache the cost of the least cost edge at this vertex\n    // (in member variable collapse) as well as the value of the\n    // cost (in member variable collapseCost).\n\n    if (v.neighbors.length === 0) {\n      // collapse if no neighbors.\n      v.collapseNeighbor = null;\n      v.collapseCost = -0.01;\n      return;\n    }\n    v.collapseCost = 100000;\n    v.collapseNeighbor = null;\n\n    // search all neighboring edges for \"least cost\" edge\n    for (var i = 0; i < v.neighbors.length; i++) {\n      var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n      if (!v.collapseNeighbor) {\n        v.collapseNeighbor = v.neighbors[i];\n        v.collapseCost = collapseCost;\n        v.minCost = collapseCost;\n        v.totalCost = 0;\n        v.costCount = 0;\n      }\n      v.costCount++;\n      v.totalCost += collapseCost;\n      if (collapseCost < v.minCost) {\n        v.collapseNeighbor = v.neighbors[i];\n        v.minCost = collapseCost;\n      }\n    }\n\n    // we average the cost of collapsing at this vertex\n    v.collapseCost = v.totalCost / v.costCount;\n    // v.collapseCost = v.minCost;\n  }\n\n  function removeVertex(v, vertices) {\n    console.assert(v.faces.length === 0);\n    while (v.neighbors.length) {\n      var n = v.neighbors.pop();\n      removeFromArray(n.neighbors, v);\n    }\n    removeFromArray(vertices, v);\n  }\n  function removeFace(f, faces) {\n    removeFromArray(faces, f);\n    if (f.v1) removeFromArray(f.v1.faces, f);\n    if (f.v2) removeFromArray(f.v2.faces, f);\n    if (f.v3) removeFromArray(f.v3.faces, f);\n\n    // TODO optimize this!\n    var vs = [f.v1, f.v2, f.v3];\n    var v1, v2;\n    for (var i = 0; i < 3; i++) {\n      v1 = vs[i];\n      v2 = vs[(i + 1) % 3];\n      if (!v1 || !v2) continue;\n      v1.removeIfNonNeighbor(v2);\n      v2.removeIfNonNeighbor(v1);\n    }\n  }\n  function collapse(vertices, faces, u, v) {\n    // u and v are pointers to vertices of an edge\n\n    // Collapse the edge uv by moving vertex u onto v\n\n    if (!v) {\n      // u is a vertex all by itself so just delete it..\n      removeVertex(u, vertices);\n      return;\n    }\n    var i;\n    var tmpVertices = [];\n    for (i = 0; i < u.neighbors.length; i++) {\n      tmpVertices.push(u.neighbors[i]);\n    }\n\n    // delete triangles on edge uv:\n    for (i = u.faces.length - 1; i >= 0; i--) {\n      if (u.faces[i].hasVertex(v)) {\n        removeFace(u.faces[i], faces);\n      }\n    }\n\n    // update remaining triangles to have v instead of u\n    for (i = u.faces.length - 1; i >= 0; i--) {\n      u.faces[i].replaceVertex(u, v);\n    }\n    removeVertex(u, vertices);\n\n    // recompute the edge collapse costs in neighborhood\n    for (i = 0; i < tmpVertices.length; i++) {\n      computeEdgeCostAtVertex(tmpVertices[i]);\n    }\n  }\n  function minimumCostEdge(vertices) {\n    // O(n * n) approach. TODO optimize this\n\n    var least = vertices[0];\n    for (var i = 0; i < vertices.length; i++) {\n      if (vertices[i].collapseCost < least.collapseCost) {\n        least = vertices[i];\n      }\n    }\n    return least;\n  }\n\n  // we use a triangle class to represent structure of face slightly differently\n\n  function Triangle(v1, v2, v3, a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.normal = new Vector3();\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n  Triangle.prototype.computeNormal = function () {\n    var vA = this.v1.position;\n    var vB = this.v2.position;\n    var vC = this.v3.position;\n    cb.subVectors(vC, vB);\n    ab.subVectors(vA, vB);\n    cb.cross(ab).normalize();\n    this.normal.copy(cb);\n  };\n  Triangle.prototype.hasVertex = function (v) {\n    return v === this.v1 || v === this.v2 || v === this.v3;\n  };\n  Triangle.prototype.replaceVertex = function (oldv, newv) {\n    if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n    removeFromArray(oldv.faces, this);\n    newv.faces.push(this);\n    oldv.removeIfNonNeighbor(this.v1);\n    this.v1.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v2);\n    this.v2.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v3);\n    this.v3.removeIfNonNeighbor(oldv);\n    this.v1.addUniqueNeighbor(this.v2);\n    this.v1.addUniqueNeighbor(this.v3);\n    this.v2.addUniqueNeighbor(this.v1);\n    this.v2.addUniqueNeighbor(this.v3);\n    this.v3.addUniqueNeighbor(this.v1);\n    this.v3.addUniqueNeighbor(this.v2);\n    this.computeNormal();\n  };\n  function Vertex(v, id) {\n    this.position = v;\n    this.id = id; // old index id\n\n    this.faces = []; // faces vertex is connected\n    this.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n    // these will be computed in computeEdgeCostAtVertex()\n    this.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n    this.collapseNeighbor = null; // best candinate for collapsing\n  }\n\n  Vertex.prototype.addUniqueNeighbor = function (vertex) {\n    pushIfUnique(this.neighbors, vertex);\n  };\n  Vertex.prototype.removeIfNonNeighbor = function (n) {\n    var neighbors = this.neighbors;\n    var faces = this.faces;\n    var offset = neighbors.indexOf(n);\n    if (offset === -1) return;\n    for (var i = 0; i < faces.length; i++) {\n      if (faces[i].hasVertex(n)) return;\n    }\n    neighbors.splice(offset, 1);\n  };\n  SimplifyModifier.prototype.modify = function (geometry, count) {\n    if (geometry.isBufferGeometry) {\n      geometry = new Geometry().fromBufferGeometry(geometry);\n    }\n    geometry.mergeVertices();\n    var oldVertices = geometry.vertices; // Three Position\n    var oldFaces = geometry.faces; // Three Face\n\n    // conversion\n    var vertices = [];\n    var faces = [];\n    var i, il;\n\n    //\n    // put data of original geometry in different data structures\n    //\n\n    // add vertices\n\n    for (i = 0, il = oldVertices.length; i < il; i++) {\n      var vertex = new Vertex(oldVertices[i], i);\n      vertices.push(vertex);\n    }\n\n    // add faces\n\n    for (i = 0, il = oldFaces.length; i < il; i++) {\n      var face = oldFaces[i];\n      var a = face.a;\n      var b = face.b;\n      var c = face.c;\n      var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n      faces.push(triangle);\n    }\n\n    // compute all edge collapse costs\n\n    for (i = 0, il = vertices.length; i < il; i++) {\n      computeEdgeCostAtVertex(vertices[i]);\n    }\n    var nextVertex;\n    var z = count;\n    while (z--) {\n      nextVertex = minimumCostEdge(vertices);\n      if (!nextVertex) {\n        console.log('THREE.SimplifyModifier: No next vertex');\n        break;\n      }\n      collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n    }\n\n    //\n\n    var simplifiedGeometry = new BufferGeometry();\n    var position = [];\n    var index = [];\n\n    //\n\n    for (i = 0; i < vertices.length; i++) {\n      var vertex = vertices[i].position;\n      position.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    //\n\n    for (i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      var a = vertices.indexOf(face.v1);\n      var b = vertices.indexOf(face.v2);\n      var c = vertices.indexOf(face.v3);\n      index.push(a, b, c);\n    }\n\n    //\n\n    simplifiedGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    simplifiedGeometry.setIndex(index);\n    return simplifiedGeometry;\n  };\n})();\nexport { SimplifyModifier };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","Geometry","Vector3","SimplifyModifier","cb","ab","pushIfUnique","array","object","indexOf","push","removeFromArray","k","splice","computeEdgeCollapseCost","u","v","edgelength","position","distanceTo","curvature","sideFaces","i","il","faces","length","face","sideFace","hasVertex","minCurvature","j","dotProd","normal","dot","Math","min","max","borders","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","vertices","console","assert","n","pop","removeFace","f","v1","v2","v3","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","a","b","c","computeNormal","addUniqueNeighbor","prototype","vA","vB","vC","subVectors","cross","normalize","copy","oldv","newv","Vertex","id","vertex","offset","modify","geometry","count","isBufferGeometry","fromBufferGeometry","mergeVertices","oldVertices","oldFaces","triangle","nextVertex","z","log","simplifiedGeometry","index","x","y","setAttribute","setIndex"],"sources":["/Users/Aaron/Desktop/mirrorsReactThreeFiber/node_modules/three/examples/jsm/modifiers/SimplifyModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tGeometry,\n\tVector3\n} from \"../../../build/three.module.js\";\n\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nvar SimplifyModifier = function () {};\n\n( function () {\n\n\tvar cb = new Vector3(), ab = new Vector3();\n\n\tfunction pushIfUnique( array, object ) {\n\n\t\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n\t}\n\n\tfunction removeFromArray( array, object ) {\n\n\t\tvar k = array.indexOf( object );\n\t\tif ( k > - 1 ) array.splice( k, 1 );\n\n\t}\n\n\tfunction computeEdgeCollapseCost( u, v ) {\n\n\t\t// if we collapse edge uv by moving u to v then how\n\t\t// much different will the model change, i.e. the \"error\".\n\n\t\tvar edgelength = v.position.distanceTo( u.position );\n\t\tvar curvature = 0;\n\n\t\tvar sideFaces = [];\n\t\tvar i, il = u.faces.length, face, sideFace;\n\n\t\t// find the \"sides\" triangles that are on the edge uv\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tface = u.faces[ i ];\n\n\t\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\t\tsideFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use the triangle facing most away from the sides\n\t\t// to determine our curvature term\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tvar minCurvature = 1;\n\t\t\tface = u.faces[ i ];\n\n\t\t\tfor ( var j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\t\tsideFace = sideFaces[ j ];\n\t\t\t\t// use dot product of face normals.\n\t\t\t\tvar dotProd = face.normal.dot( sideFace.normal );\n\t\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t\t}\n\n\t\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t\t}\n\n\t\t// crude approach in attempt to preserve borders\n\t\t// though it seems not to be totally correct\n\t\tvar borders = 0;\n\t\tif ( sideFaces.length < 2 ) {\n\n\t\t\t// we add some arbitrary cost for borders,\n\t\t\t// borders += 10;\n\t\t\tcurvature = 1;\n\n\t\t}\n\n\t\tvar amt = edgelength * curvature + borders;\n\n\t\treturn amt;\n\n\t}\n\n\tfunction computeEdgeCostAtVertex( v ) {\n\n\t\t// compute the edge collapse cost for all edges that start\n\t\t// from vertex v.  Since we are only interested in reducing\n\t\t// the object by selecting the min cost edge at each step, we\n\t\t// only cache the cost of the least cost edge at this vertex\n\t\t// (in member variable collapse) as well as the value of the\n\t\t// cost (in member variable collapseCost).\n\n\t\tif ( v.neighbors.length === 0 ) {\n\n\t\t\t// collapse if no neighbors.\n\t\t\tv.collapseNeighbor = null;\n\t\t\tv.collapseCost = - 0.01;\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tv.collapseCost = 100000;\n\t\tv.collapseNeighbor = null;\n\n\t\t// search all neighboring edges for \"least cost\" edge\n\t\tfor ( var i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\t\tvar collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.collapseCost = collapseCost;\n\t\t\t\tv.minCost = collapseCost;\n\t\t\t\tv.totalCost = 0;\n\t\t\t\tv.costCount = 0;\n\n\t\t\t}\n\n\t\t\tv.costCount ++;\n\t\t\tv.totalCost += collapseCost;\n\n\t\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.minCost = collapseCost;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// we average the cost of collapsing at this vertex\n\t\tv.collapseCost = v.totalCost / v.costCount;\n\t\t// v.collapseCost = v.minCost;\n\n\t}\n\n\tfunction removeVertex( v, vertices ) {\n\n\t\tconsole.assert( v.faces.length === 0 );\n\n\t\twhile ( v.neighbors.length ) {\n\n\t\t\tvar n = v.neighbors.pop();\n\t\t\tremoveFromArray( n.neighbors, v );\n\n\t\t}\n\n\t\tremoveFromArray( vertices, v );\n\n\t}\n\n\tfunction removeFace( f, faces ) {\n\n\t\tremoveFromArray( faces, f );\n\n\t\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\t\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\t\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t\t// TODO optimize this!\n\t\tvar vs = [ f.v1, f.v2, f.v3 ];\n\t\tvar v1, v2;\n\n\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\tv1 = vs[ i ];\n\t\t\tv2 = vs[ ( i + 1 ) % 3 ];\n\n\t\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\t\tv1.removeIfNonNeighbor( v2 );\n\t\t\tv2.removeIfNonNeighbor( v1 );\n\n\t\t}\n\n\t}\n\n\tfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t\t// Collapse the edge uv by moving vertex u onto v\n\n\t\tif ( ! v ) {\n\n\t\t\t// u is a vertex all by itself so just delete it..\n\t\t\tremoveVertex( u, vertices );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar i;\n\t\tvar tmpVertices = [];\n\n\t\tfor ( i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t\t}\n\n\n\t\t// delete triangles on edge uv:\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tif ( u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update remaining triangles to have v instead of u\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t\t}\n\n\n\t\tremoveVertex( u, vertices );\n\n\t\t// recompute the edge collapse costs in neighborhood\n\t\tfor ( i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t\t}\n\n\t}\n\n\n\n\tfunction minimumCostEdge( vertices ) {\n\n\t\t// O(n * n) approach. TODO optimize this\n\n\t\tvar least = vertices[ 0 ];\n\n\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\t\tleast = vertices[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn least;\n\n\t}\n\n\t// we use a triangle class to represent structure of face slightly differently\n\n\tfunction Triangle( v1, v2, v3, a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t\tthis.normal = new Vector3();\n\n\t\tthis.computeNormal();\n\n\t\tv1.faces.push( this );\n\t\tv1.addUniqueNeighbor( v2 );\n\t\tv1.addUniqueNeighbor( v3 );\n\n\t\tv2.faces.push( this );\n\t\tv2.addUniqueNeighbor( v1 );\n\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\tv3.faces.push( this );\n\t\tv3.addUniqueNeighbor( v1 );\n\t\tv3.addUniqueNeighbor( v2 );\n\n\t}\n\n\tTriangle.prototype.computeNormal = function () {\n\n\t\tvar vA = this.v1.position;\n\t\tvar vB = this.v2.position;\n\t\tvar vC = this.v3.position;\n\n\t\tcb.subVectors( vC, vB );\n\t\tab.subVectors( vA, vB );\n\t\tcb.cross( ab ).normalize();\n\n\t\tthis.normal.copy( cb );\n\n\t};\n\n\tTriangle.prototype.hasVertex = function ( v ) {\n\n\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t};\n\n\tTriangle.prototype.replaceVertex = function ( oldv, newv ) {\n\n\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\tremoveFromArray( oldv.faces, this );\n\t\tnewv.faces.push( this );\n\n\n\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\tthis.computeNormal();\n\n\t};\n\n\tfunction Vertex( v, id ) {\n\n\t\tthis.position = v;\n\n\t\tthis.id = id; // old index id\n\n\t\tthis.faces = []; // faces vertex is connected\n\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t}\n\n\tVertex.prototype.addUniqueNeighbor = function ( vertex ) {\n\n\t\tpushIfUnique( this.neighbors, vertex );\n\n\t};\n\n\tVertex.prototype.removeIfNonNeighbor = function ( n ) {\n\n\t\tvar neighbors = this.neighbors;\n\t\tvar faces = this.faces;\n\n\t\tvar offset = neighbors.indexOf( n );\n\t\tif ( offset === - 1 ) return;\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t}\n\n\t\tneighbors.splice( offset, 1 );\n\n\t};\n\n\tSimplifyModifier.prototype.modify = function ( geometry, count ) {\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new Geometry().fromBufferGeometry( geometry );\n\n\t\t}\n\n\t\tgeometry.mergeVertices();\n\n\t\tvar oldVertices = geometry.vertices; // Three Position\n\t\tvar oldFaces = geometry.faces; // Three Face\n\n\t\t// conversion\n\t\tvar vertices = [];\n\t\tvar faces = [];\n\n\t\tvar i, il;\n\n\t\t//\n\t\t// put data of original geometry in different data structures\n\t\t//\n\n\t\t// add vertices\n\n\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = new Vertex( oldVertices[ i ], i );\n\t\t\tvertices.push( vertex );\n\n\t\t}\n\n\t\t// add faces\n\n\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\tvar face = oldFaces[ i ];\n\n\t\t\tvar a = face.a;\n\t\t\tvar b = face.b;\n\t\t\tvar c = face.c;\n\n\t\t\tvar triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\tfaces.push( triangle );\n\n\t\t}\n\n\t\t// compute all edge collapse costs\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t}\n\n\t\tvar nextVertex;\n\n\t\tvar z = count;\n\n\t\twhile ( z -- ) {\n\n\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t}\n\n\t\t//\n\n\t\tvar simplifiedGeometry = new BufferGeometry();\n\t\tvar position = [];\n\t\tvar index = [];\n\n\t\t//\n\n\t\tfor ( i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tvar vertex = vertices[ i ].position;\n\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = vertices.indexOf( face.v1 );\n\t\t\tvar b = vertices.indexOf( face.v2 );\n\t\t\tvar c = vertices.indexOf( face.v3 );\n\n\t\t\tindex.push( a, b, c );\n\n\t\t}\n\n\t\t//\n\n\t\tsimplifiedGeometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\t\tsimplifiedGeometry.setIndex( index );\n\n\t\treturn simplifiedGeometry;\n\n\t};\n\n} )();\n\nexport { SimplifyModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}